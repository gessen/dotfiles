;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     helm
     ansible
     (auto-completion :variables
                      auto-completion-enable-help-tooltip t)
     better-defaults
     cmake
     (c-c++ :variables
            c-c++-adopt-subprojects t
            c-c++-lsp-sem-highlight-rainbow t
            c-c++-lsp-sem-highlight-method 'overlay
            c-c++-backend 'lsp-ccls
            c-c++-lsp-executable "ccls"
            c-c++-lsp-cache-dir ".ccls-cache"
            c-c++-lsp-args (list "-log-file=/tmp/ccls.log" "-v=1")
            c-c++-lsp-initialization-options '
              (:clang (:extraArgs ["-Weverything"
                                   "-Wno-c++98-compat"
                                   "-Wno-c++98-compat-pedantic"
                                   "-Wno-covered-switch-default"
                                   "-Wno-global-constructors"
                                   "-Wno-exit-time-destructors"
                                   "-Wno-documentation"
                                   "-Wno-padded"
                                   "-Wno-unneeded-member-function"
                                   "-Wno-unused-member-function"
                                   "-Wno-language-extension-token"
                                   "-Wno-gnu-zero-variadic-macro-arguments"
                                   "-Wno-gnu-statement-expression"
                                   "-Wno-unused-macros"
                                   "-Wno-error"]
                       :excludeArgs ["-fconserve-stack"
                                     "-fmacro-prefix-map"
                                     "-fmerge-constants"
                                     "-fno-var-tracking-assignments"
                                     "-mabi=lp64"])
                       :codeLens (:localVariables :json-false)
                       :completion (:caseSensitivity 1)
                       :index (:blacklist [".*CMakeFiles.*"])))
     emacs-lisp
     fasd
     (git :variables
          git-magit-status-fullscreen t)
     (lsp :variables
          ; lsp-print-io t
          lsp-auto-guess-root t
          lsp-prefer-flymake nil
          lsp-remap-xref-keybindings t
          lsp-navigation 'peek
          lsp-ui-peek-fontify 'always
          lsp-ui-peek-always-show t)
     ;; markdown
     (multiple-cursors :variables
                       multiple-cursors-backend 'mc)
     ;; org
     (ranger :variables
             ranger-show-hidden t)
     (rust :variables
           rust-backend 'lsp)
     search-engine
     semantic
     (shell :variables
            shell-default-height 45)
     shell-scripts
     ;; spell-checking
     ;; syntax-checking
     treemacs
     version-control
    )

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   ;; To use a local version of a package, use the `:location' property:
   ;; '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages
   '(
     (bb-mode :location (recipe :fetcher github :repo "mferland/bb-mode"))
     cmake-font-lock
     deadgrep
     duplicate-thing
     flycheck
     fzf
     hideshow-org
     phi-search
     phi-search-mc
     treemacs-icons-dired
     vlf
     vterm
     vterm-toggle
     xclip
     zop-to-char
    )

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(disaster)

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; File path pointing to emacs 27.1 executable compiled with support
   ;; for the portable dumper (this is currently the branch pdumper).
   ;; (default "emacs-27.0.50")
   dotspacemacs-emacs-pdumper-executable-file "emacs-27.0.50"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default nil)
   dotspacemacs-verify-spacelpa-archives nil

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'emacs

   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         monokai
                         solarized-dark)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme 'all-the-icons

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but lines are only visual lines are counted. For example, folded lines
   ;; will not be counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers t

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'origami

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server nil

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  (setq custom-file "~/.emacs.d/.cache/.custom-settings")
  (load-file custom-file)
  (setq-default
   ; debug-on-error t
   )
  )

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
  )

(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  ;;----------------------------------------------------------------------------
  ;; Emacs
  ;;----------------------------------------------------------------------------
  ;; Disable lockfiles (those pesky .# symlinks).
  (setq create-lockfiles nil)

  ;; General indentation.
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)

  ;; Indentation for CC Mode
  (defconst my-cc-style
    '((c-recognize-knr-p . nil)
      (c-basic-offset . 2)
      (c-tab-always-indent . t)
      (c-comment-only-line-offset . 0)
      (comment-column . 40)
      (c-indent-comments-syntactically-p . t)
      (c-indent-comment-alist . ((other . (space . 1))))
      ; (c-echo-syntactic-information-p . t)
      (c-hanging-braces-alist . ((defun-open before after)
                                 (defun-close before after)
                                 (class-open after)
                                 (class-close before)
                                 (inexpr-class-open after)
                                 (inexpr-class-close before)
                                 (namespace-open after)
                                 (namespace-close before after)
                                 (inline-open before after)
                                 (inline-close before after)
                                 (block-open after)
                                 (block-close . c-snug-do-while)
                                 (extern-lang-open after)
                                 (extern-lang-close before after)
                                 (statement-case-open after)
                                 (substatement-open after)))
      (c-hanging-colons-alist . ((case-label after)
                                 (label after)
                                 (access-label after)
                                 (member-init-intro)
                                 (inher-intro)))
      (c-hanging-semi&comma-criteria
       . (c-semi&comma-inside-parenlist
          c-semi&comma-no-newlines-before-nonblanks
          c-semi&comma-no-newlines-for-oneline-inliners))
      (c-cleanup-list . (brace-else-brace
                         brace-elseif-brace
                         brace-catch-brace
                         defun-close-semi
                         list-close-comma
                         scope-operator))
      (c-offsets-alist . ((inexpr-class . +)
                          (inexpr-statement . +)
                          (lambda-intro-cont . +)
                          (inlambda . c-lineup-inexpr-block)
                          (template-args-cont c-lineup-template-args +)
                          (incomposition . +)
                          (inmodule . +)
                          (innamespace . 0)
                          (inextern-lang . +)
                          (composition-close . 0)
                          (module-close . 0)
                          (namespace-close . 0)
                          (extern-lang-close . 0)
                          (composition-open . 0)
                          (module-open . 0)
                          (namespace-open . 0)
                          (extern-lang-open . 0)
                          (friend . 0)
                          (cpp-define-intro c-lineup-cpp-define +)
                          (cpp-macro-cont . +)
                          (cpp-macro . [0])
                          (inclass . +)
                          (stream-op . c-lineup-streamop)
                          (arglist-cont-nonempty
                            c-lineup-gcc-asm-reg c-lineup-arglist)
                          (arglist-cont c-lineup-gcc-asm-reg 0)
                          (comment-intro c-lineup-knr-region-comment
                            c-lineup-comment)
                          (catch-clause . 0)
                          (else-clause . 0)
                          (do-while-closure . 0)
                          (access-label . -)
                          (case-label . 0)
                          (substatement . +)
                          (statement-case-intro . +)
                          (statement . 0)
                          (brace-entry-open . 0)
                          (brace-list-entry . c-lineup-under-anchor)
                          (brace-list-close . 0)
                          (block-close . 0)
                          (block-open . 0)
                          (inher-cont . c-lineup-multi-inher)
                          (inher-intro . +)
                          (member-init-cont . c-lineup-multi-inher)
                          (member-init-intro . +)
                          (annotation-var-cont . +)
                          (annotation-top-cont . 0)
                          (topmost-intro . 0)
                          (func-decl-cont . +)
                          (inline-close . 0)
                          (class-close . 0)
                          (class-open . 0)
                          (defun-block-intro . +)
                          (defun-close . 0)
                          (defun-open . 0)
                          (c . c-lineup-C-comments)
                          (string . c-lineup-dont-change)
                          (topmost-intro-cont . c-lineup-topmost-intro-cont)
                          (brace-list-intro . +)
                          (brace-list-open . 0)
                          (inline-open . +)
                          (arglist-close . +)
                          (arglist-intro . +)
                          (statement-cont . +)
                          (statement-case-open . 0)
                          (label . ++)
                          (substatement-label . ++)
                          (substatement-open . +)
                          (statement-block-intro . +)))
      )
    "My personal C/C++ programming style")
  (c-add-style "personal" my-cc-style)

  ;; Column length
  (setq-default fill-column 80)
  (setq column-enforce-column fill-column)

  ;; Ensure newline is present at the end of the file
  (setq require-final-newline t)

  ;; Display indentation guides with a delay for performance.
  (setq indent-guide-delay 0.1)
  ; (setq indent-guide-recursive t)

  ;; Display indentation guides in all buffers.
  (spacemacs/toggle-indent-guide-globally-on)

  ;; Always follow symlinks.
  (setq vc-follow-symlinks t)

  ;; Use SSH by default for tramp
  (setq tramp-default-method "ssh")
  (setq tramp-ssh-controlmaster-options "")

  ;; Use fd instead of find for ffip
  (setq ffip-use-rust-fd t)

  ;; Dired ls options
  (setq dired-listing-switches "-alvFh --group-directories-first")

  ;;----------------------------------------------------------------------------
  ;; xclip
  ;;----------------------------------------------------------------------------
  ;; Enables xclip integration for copy/paste to system clipboard.
  ;; The `xclip` package needs to be installed on the machine emacs is running.
  (xclip-mode 1)

  ;;----------------------------------------------------------------------------
  ;; deadgrep
  ;;----------------------------------------------------------------------------
  (require 'deadgrep)

  ;;----------------------------------------------------------------------------
  ;; projectile
  ;;----------------------------------------------------------------------------
  (require 'projectile)
  (projectile-register-project-type 'cmake '("CMakeLists.txt")
    :compilation-dir "build"
    :configure (string-join
      '("cmake" ".." "-GNinja" "-DCMAKE_BUILD_TYPE=Debug"
        "-DCMAKE_INSTALL_PREFIX=/usr" "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON") " ")
    :compile "cmake --build . -- -j$(nproc)"
    :test "cmake --build . -- -j$(nproc) && ctest --output-on-failure")

  ;;----------------------------------------------------------------------------
  ;; bb-mode
  ;;----------------------------------------------------------------------------
  (require 'bb-mode)
  (setq auto-mode-alist (cons '("\\.bb$" . bb-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.inc$" . bb-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.bbappend$" . bb-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.bbclass$" . bb-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.conf$" . bb-mode) auto-mode-alist))

  ;;----------------------------------------------------------------------------
  ;; multiple-cursors
  ;;----------------------------------------------------------------------------
  (require 'multiple-cursors)

  ;;----------------------------------------------------------------------------
  ;; phi-search
  ;;----------------------------------------------------------------------------
  (require 'phi-search)
  (require 'phi-replace)

  ;;----------------------------------------------------------------------------
  ;; phi-search-mc
  ;;----------------------------------------------------------------------------
  (require 'phi-search-mc)
  (phi-search-mc/setup-keys)
  (add-hook 'isearch-mode-hook 'phi-search-from-isearch-mc/setup-keys)

  ;;----------------------------------------------------------------------------
  ;; move-text
  ;;----------------------------------------------------------------------------
  (require 'move-text)
  (move-text-default-bindings)

  ;;----------------------------------------------------------------------------
  ;; smartparens
  ;;----------------------------------------------------------------------------
  (setq-default sp-escape-quotes-after-insert nil)

  ;;----------------------------------------------------------------------------
  ;; cmake-font-lock
  ;;----------------------------------------------------------------------------
  (require 'cmake-font-lock)

  ;;----------------------------------------------------------------------------
  ;; treemacs-icons-dired
  ;;----------------------------------------------------------------------------
  (use-package treemacs-icons-dired
    :after dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  ;;----------------------------------------------------------------------------
  ;; duplicate-thing
  ;;----------------------------------------------------------------------------
  (require 'duplicate-thing)

  ;;----------------------------------------------------------------------------
  ;; hideshow-org
  ;;----------------------------------------------------------------------------
  (require 'hideshow-org)

  ;;----------------------------------------------------------------------------
  ;; vlf
  ;;----------------------------------------------------------------------------
  (require 'vlf-setup)

  ;;----------------------------------------------------------------------------
  ;; libvterm
  ;;----------------------------------------------------------------------------
  (require 'vterm)
  (require 'vterm-toggle)
  (define-key vterm-mode-map (kbd "s-n") 'vterm-toggle-forward)
  (define-key vterm-mode-map (kbd "s-p") 'vterm-toggle-backward)

  ;;----------------------------------------------------------------------------
  ;; aggressive-indent-mode
  ;;----------------------------------------------------------------------------
  (spacemacs/toggle-aggressive-indent-on)

  ;;----------------------------------------------------------------------------
  ;; whitespace-cleanup-mode
  ;;----------------------------------------------------------------------------
  (spacemacs/toggle-whitespace-cleanup-on)

  ;;----------------------------------------------------------------------------
  ;; Modes' hooks
  ;;----------------------------------------------------------------------------
  (add-hook 'c-mode-common-hook
   '(lambda ()
      (c-set-style "personal")
      (c-toggle-hungry-state 1)
      ;; Show ruler
      (display-fill-column-indicator-mode)
      ;; Move cursor by camelCase, PascalCase and smart_case
      (subword-mode)
      ;; Smartparens
      (push 'c-electric-paren sp--special-self-insert-commands)
      (push 'c-electric-brace sp--special-self-insert-commands)))

  (add-hook 'git-commit-mode-hook
   '(lambda ()
      (setq fill-column 72)
      (turn-on-auto-fill)))

  ;;----------------------------------------------------------------------------
  ;; Key bindings
  ;;----------------------------------------------------------------------------
  (setq-default my-keys (make-sparse-keymap))

  ;; Some default keybinds changes
  (define-key my-keys (kbd "M-o") 'ace-window)
  (define-key my-keys (kbd "M-n") 'next-error)
  (define-key my-keys (kbd "M-p") 'previous-error)
  (define-key my-keys (kbd "M-g") 'goto-line)
  (define-key my-keys (kbd "M-j") 'evil-avy-goto-char-timer)
  (define-key my-keys (kbd "C-q") 'ido-kill-buffer)
  (define-key my-keys (kbd "C-o") 'helm-buffers-list)

  ;; zop-to-char
  (define-key my-keys [remap zap-to-char] 'zop-up-to-char)

  ;; display-fill-column-indicator-mode
  (define-key my-keys [remap spacemacs/toggle-fill-column-indicator]
   'display-fill-column-indicator-mode)

  ;; projectile
  (spacemacs/set-leader-keys "pC" 'projectile-configure-project)
  (spacemacs/set-leader-keys "pt" 'projectile-test-project)
  (spacemacs/set-leader-keys "pT" 'spacemacs/treemacs-project-toggle)

  ;; deadgrep
  (define-key my-keys (kbd "<f5>") #'deadgrep)

  ;; multiple-cursors
  (define-key my-keys (kbd "C-.")     'mc/mark-next-like-this)
  (define-key my-keys (kbd "C-,")     'mc/mark-previous-like-this)
  (define-key my-keys (kbd "C->")     'mc/mark-next-like-this-word)
  (define-key my-keys (kbd "C-<")     'mc/mark-previous-like-this-word)
  (define-key my-keys (kbd "C-c l")   'mc/edit-lines)
  (define-key my-keys (kbd "C-c .")   'mc/mark-next-like-this)
  (define-key my-keys (kbd "C-c ,")   'mc/mark-previous-like-this)
  (define-key my-keys (kbd "C-c >")   'mc/mark-next-like-this-word)
  (define-key my-keys (kbd "C-c <")   'mc/mark-previous-like-this-word)
  (define-key my-keys (kbd "C-c M-.") 'mc/unmark-next-like-this)
  (define-key my-keys (kbd "C-c M-,") 'mc/unmark-previous-like-this)
  (define-key my-keys (kbd "C-c M->") 'mc/mark-all-like-this)
  (define-key my-keys (kbd "C-c M-<") 'mc/mark-all-words-like-this)

  ;; phi-search
  (define-key my-keys (kbd "C-s") 'phi-search)
  (define-key my-keys (kbd "C-r") 'phi-search-backward)
  (define-key my-keys (kbd "M-%") 'phi-replace-query)

  ;; duplicate-thing
  (define-key my-keys (kbd "M-c") 'duplicate-thing)

  ;; hideshow-org
  (define-key my-keys (kbd "C-c h") 'hs-org/minor-mode)

  ;; libvterm-toggle
  (define-key my-keys (kbd "<f2>")   'vterm-toggle)
  (define-key my-keys (kbd "C-<f2>") 'vterm-toggle-cd)

  (define-minor-mode my-keys-mode
    "A minor mode to set key binds that will not be overridden by major modes"
    :init-value t
    :keymap my-keys)

  (my-keys-mode 1)

  ;; lsp-ui-flycheck
  (with-eval-after-load 'lsp-ui
     (define-key lsp-ui-flycheck-list-mode-map (kbd "n") 'next-line)
     (define-key lsp-ui-flycheck-list-mode-map (kbd "p") 'previous-line)
     (define-key lsp-ui-flycheck-list-mode-map (kbd "RET")
       'lsp-ui-flycheck-list--view)
     (define-key lsp-ui-flycheck-list-mode-map (kbd "M-RET")
       'lsp-ui-flycheck-list--visit)
     (define-key lsp-ui-flycheck-list-mode-map (kbd "o")
       'lsp-ui-flycheck-list--visit))

  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
