;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation nil

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     (auto-completion :variables
                      auto-completion-enable-help-tooltip t)
     better-defaults
     cmake
     (c-c++ :variables
            c-c++-adopt-subprojects t
            c-c++-backend 'lsp-ccls
            c-c++-lsp-enable-semantic-highlight 'rainbow
            c-c++-lsp-semantic-highlight-method 'overlay
            lsp-clients-clangd-args
              (list "-log=info" "--completion-style=detailed")
            ccls-args (list "-log-file=/tmp/ccls.log" "-v=1")
            ccls-initialization-options '
              (:clang (:extraArgs ["-Weverything"
                                   "-Wno-c++98-compat"
                                   "-Wno-c++98-compat-pedantic"
                                   "-Wno-covered-switch-default"
                                   "-Wno-global-constructors"
                                   "-Wno-exit-time-destructors"
                                   "-Wno-documentation"
                                   "-Wno-padded"
                                   "-Wno-unneeded-member-function"
                                   "-Wno-unused-member-function"
                                   "-Wno-language-extension-token"
                                   "-Wno-gnu-zero-variadic-macro-arguments"
                                   "-Wno-gnu-statement-expression"
                                   "-Wno-unused-macros"
                                   "-Wno-weak-vtables"
                                   "-Wno-error"]
                       :excludeArgs ["-fconserve-stack"
                                     "-fmacro-prefix-map"
                                     "-fmerge-constants"
                                     "-fno-var-tracking-assignments"
                                     "-fstack-usage"
                                     "-mabi=lp64"])
               :codeLens (:localVariables :json-false)
               :completion (:caseSensitivity 1
                            :detailedLabel t
                            :duplicateOptional t
                            :include (:maxPathSize 30))
               :index (:blacklist [".*CMakeFiles.*"]
                       :maxInitializerLines 15)))
     debug
     emacs-lisp
     fasd
     (git :variables
          git-magit-status-fullscreen t)
     helm
     (lsp :variables
          ; lsp-print-io t
          lsp-auto-guess-root t
          lsp-diagnostics-package 'flycheck
          lsp-enable-file-watchers nil
          lsp-semantic-highlighting 'immediate
          lsp-idle-delay 0.500
          lsp-navigation 'peek
          lsp-remap-xref-keybindings t
          lsp-ui-peek-fontify 'always
          lsp-ui-peek-always-show t
          lsp-ui-doc-position 'top)
     (multiple-cursors :variables
                       multiple-cursors-backend 'mc)
     (ranger :variables
             ranger-cleanup-on-disable t
             ranger-show-hidden t)
     (rust :variables
           rust-backend 'lsp)
     search-engine
     semantic
     (shell :variables
            shell-default-shell 'vterm
            shell-default-height 45)
     shell-scripts
     treemacs
     (version-control :variables
                      version-control-diff-side 'left)
     )

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   ;; To use a local version of a package, use the `:location' property:
   ;; '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages
   '(
     ace-mc
     (bb-mode :location (recipe :fetcher github :repo "mferland/bb-mode"))
     centaur-tabs
     cmake-font-lock
     deadgrep
     dired-k
     diredfl
     duplicate-thing
     easy-kill
     frog-jump-buffer
     (helm-treemacs-icons :location
       (recipe :fetcher github :repo "yyoncho/helm-treemacs-icons"))
     highlight-indent-guides
     vlf
     vterm
     vterm-toggle
     xclip
     zop-to-char
    )

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(cquery disaster)

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper t

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "emacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'emacs

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(monokai
                         moe-dark
                         spacemacs-dark)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme 'doom

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar nil

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but lines are only visual lines are counted. For example, folded lines
   ;; will not be counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers t

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'origami

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server nil

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  (setq custom-file (concat spacemacs-cache-directory "custom-settings"))
  (load-file custom-file)
  )

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
  )

(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  ;;----------------------------------------------------------------------------
  ;; Emacs general
  ;;----------------------------------------------------------------------------
  ;; Set cursor as white IBeam
  (setq evil-emacs-state-cursor '("seashell2" bar))

  ;; Disable lockfiles (those pesky .# symlinks).
  (setq create-lockfiles nil)

  ;; General indentation.
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)

  ;; Column length
  (setq-default fill-column 80)

  ;; Completion styles
  (add-to-list 'completion-styles 'flex t)

  ;; Maximum number of bytes to read from subprocess in a single chunk
  (setq read-process-output-max (* 1024 1024))

  ;; Indentation for CC Mode
  (defconst my-cc-style
    '((c-recognize-knr-p . nil)
      (c-basic-offset . 2)
      (c-tab-always-indent . t)
      (c-comment-only-line-offset . 0)
      (comment-column . 40)
      (c-indent-comments-syntactically-p . t)
      (c-indent-comment-alist . ((other . (space . 1))))
      ; (c-echo-syntactic-information-p . t)
      (c-hanging-braces-alist . ((defun-open before after)
                                 (defun-close before after)
                                 (class-open after)
                                 (class-close before)
                                 (inexpr-class-open after)
                                 (inexpr-class-close before)
                                 (namespace-open after)
                                 (namespace-close before after)
                                 (inline-open before after)
                                 (inline-close before after)
                                 (block-open after)
                                 (block-close . c-snug-do-while)
                                 (extern-lang-open after)
                                 (extern-lang-close before after)
                                 (statement-case-open after)
                                 (substatement-open after)))
      (c-hanging-colons-alist . ((case-label after)
                                 (label after)
                                 (access-label after)
                                 (member-init-intro)
                                 (inher-intro)))
      (c-hanging-semi&comma-criteria
       . (c-semi&comma-inside-parenlist
          c-semi&comma-no-newlines-before-nonblanks
          c-semi&comma-no-newlines-for-oneline-inliners))
      (c-cleanup-list . (brace-else-brace
                         brace-elseif-brace
                         brace-catch-brace
                         defun-close-semi
                         list-close-comma
                         scope-operator))
      (c-offsets-alist . ((inexpr-class . +)
                          (inexpr-statement . +)
                          (lambda-intro-cont . +)
                          (inlambda . c-lineup-inexpr-block)
                          (template-args-cont c-lineup-template-args +)
                          (incomposition . +)
                          (inmodule . +)
                          (innamespace . 0)
                          (inextern-lang . +)
                          (composition-close . 0)
                          (module-close . 0)
                          (namespace-close . 0)
                          (extern-lang-close . 0)
                          (composition-open . 0)
                          (module-open . 0)
                          (namespace-open . 0)
                          (extern-lang-open . 0)
                          (friend . 0)
                          (cpp-define-intro c-lineup-cpp-define +)
                          (cpp-macro-cont . +)
                          (cpp-macro . [0])
                          (inclass . +)
                          (stream-op . c-lineup-streamop)
                          (arglist-cont-nonempty
                            c-lineup-gcc-asm-reg c-lineup-arglist)
                          (arglist-cont c-lineup-gcc-asm-reg 0)
                          (comment-intro c-lineup-knr-region-comment
                            c-lineup-comment)
                          (catch-clause . 0)
                          (else-clause . 0)
                          (do-while-closure . 0)
                          (access-label . -)
                          (case-label . 0)
                          (substatement . +)
                          (statement-case-intro . +)
                          (statement . 0)
                          (brace-entry-open . 0)
                          (brace-list-entry . c-lineup-under-anchor)
                          (brace-list-close . 0)
                          (block-close . 0)
                          (block-open . 0)
                          (inher-cont . c-lineup-multi-inher)
                          (inher-intro . +)
                          (member-init-cont . c-lineup-multi-inher)
                          (member-init-intro . +)
                          (annotation-var-cont . +)
                          (annotation-top-cont . 0)
                          (topmost-intro . 0)
                          (func-decl-cont . +)
                          (inline-close . 0)
                          (class-close . 0)
                          (class-open . 0)
                          (defun-block-intro . +)
                          (defun-close . 0)
                          (defun-open . 0)
                          (c . c-lineup-C-comments)
                          (string . c-lineup-dont-change)
                          (topmost-intro-cont . c-lineup-topmost-intro-cont)
                          (brace-list-intro . +)
                          (brace-list-open . 0)
                          (inline-open . +)
                          (arglist-close . +)
                          (arglist-intro . +)
                          (statement-cont . +)
                          (statement-case-open . 0)
                          (label . ++)
                          (substatement-label . ++)
                          (substatement-open . +)
                          (statement-block-intro . +)))
      )
    "My personal C/C++ programming style")
  (c-add-style "personal" my-cc-style)

  ;;----------------------------------------------------------------------------
  ;; Builtin configuration
  ;;----------------------------------------------------------------------------
  (use-package simple
    :defer t
    :config
    (progn
      (setq kill-whole-line t))
    :bind (("M-g" . goto-line)
           ("C-q" . spacemacs/kill-this-buffer)))

  ;;----------------------------------------------------------------------------
  ;; cc-mode
  ;;----------------------------------------------------------------------------
  (use-package cc-mode
    :defer t
    :bind (:map c-mode-base-map
           ("M-j"   . nil)
           ("C-c ." . nil))
    :init
    (add-hook 'c-mode-common-hook
     '(lambda ()
        (c-set-style "personal")
        (c-toggle-hungry-state +1)
        (spacemacs-whitespace-cleanup-mode +1)
        ;; Show ruler
        (display-fill-column-indicator-mode +1)
        ;; Mark too long lines
        (column-enforce-mode +1)
        ;; Move cursor by camelCase, PascalCase and smart_case
        (subword-mode +1))))

  ;;----------------------------------------------------------------------------
  ;; git-commit-mode
  ;;----------------------------------------------------------------------------
  (use-package git-commit
    :defer t
    :init
    (add-hook 'git-commit-mode-hook
     '(lambda ()
        (setq fill-column 72)
        (turn-on-auto-fill)
        (spacemacs-whitespace-cleanup-mode +1)
        ;; Show ruler
        (display-fill-column-indicator-mode +1)
        ;; Mark too long lines
        (column-enforce-mode +1))))

  ;;----------------------------------------------------------------------------
  ;; shell-script
  ;;----------------------------------------------------------------------------
  (use-package sh-script
    :defer t
    :init
    (add-hook 'shell-script-mode-hook
     '(lambda ()
        (spacemacs-whitespace-cleanup-mode +1)
        ;; Show ruler
        (display-fill-column-indicator-mode +1)
        ;; Mark too long lines
        (column-enforce-mode +1)))
    :config
    (progn
      (setq sh-basic-offset 2)))

  ;;----------------------------------------------------------------------------
  ;; delsel
  ;;----------------------------------------------------------------------------
  (use-package delsel
    :defer t
    :init
    (delete-selection-mode +1))

  ;;----------------------------------------------------------------------------
  ;; dired
  ;;----------------------------------------------------------------------------
  (use-package dired
    :defer t
    :config
    (progn
      (setq dired-listing-switches "-alvFh --group-directories-first"))
    :bind (:map dired-mode-map
           ("C-o" . nil)))

  ;;----------------------------------------------------------------------------
  ;; display-fill-column-indicator
  ;;----------------------------------------------------------------------------
  (use-package display-fill-column-indicator
    :defer t
    :bind ([remap spacemacs/toggle-fill-column-indicator] .
            display-fill-column-indicator-mode))

  ;;----------------------------------------------------------------------------
  ;; files
  ;;----------------------------------------------------------------------------
  (use-package files
    :defer
    :config
    (progn
      (setq require-final-newline t)))

  ;;----------------------------------------------------------------------------
  ;; tramp
  ;;----------------------------------------------------------------------------
  (use-package tramp
    :defer t
    :config
    (progn
      (setq tramp-default-method "ssh")
      (setq tramp-ssh-controlmaster-options "")))

  ;;----------------------------------------------------------------------------
  ;; vc-hooks
  ;;----------------------------------------------------------------------------
  (use-package vc-hooks
    :defer t
    :config
    (progn
      (setq vc-follow-symlinks t)))

  ;;----------------------------------------------------------------------------
  ;; ace-mc
  ;;----------------------------------------------------------------------------
  (use-package ace-mc
    :defer t
    :bind ("M-i" . ace-mc-add-multiple-cursors))

  ;;----------------------------------------------------------------------------
  ;; ace-window
  ;;----------------------------------------------------------------------------
  (use-package ace-window
    :defer t
    :bind ("M-o" . ace-window))

  ;;----------------------------------------------------------------------------
  ;; anzu
  ;;----------------------------------------------------------------------------
  (use-package anzu
    :defer t
    :after isearch
    :bind (([remap query-replace]        . anzu-query-replace)
           ([remap query-replace-regexp] . anzu-query-replace-regexp)
           :map isearch-mode-map
           ([remap isearch-query-replace] . anzu-isearch-query-replace)
           ([remap isearch-query-replace-regexp] .
              anzu-isearch-query-replace-regexp)))

  ;;----------------------------------------------------------------------------
  ;; avy
  ;;----------------------------------------------------------------------------
  (use-package avy
    :defer t
    :bind (("M-j"     . nil)
           ("M-j j"   . avy-goto-char-timer)
           ("M-j M-j" . avy-goto-char-timer)
           ("M-j k"   . avy-goto-char-2)
           ("M-j M-k" . avy-goto-char-2)
           ("M-j l"   . avy-goto-line)
           ("M-j M-l" . avy-goto-line)
           ("M-j n"   . avy-goto-end-of-line)
           ("M-j M-n" . avy-goto-end-of-line)
           ("M-j m"   . avy-goto-subword-1)
           ("M-j M-m" . avy-goto-subword-1)
           ("M-j z"   . avy-move-line)
           ("M-j M-z" . avy-move-line)
           ("M-j x"   . avy-move-region)
           ("M-j M-x" . avy-move-region)
           ("M-j a"   . avy-copy-line)
           ("M-j M-a" . avy-copy-line)
           ("M-j s"   . avy-copy-region)
           ("M-j M-s" . avy-copy-region)
           ("M-j q"   . avy-kill-whole-line)
           ("M-j M-q" . avy-kill-whole-line)
           ("M-j w"   . avy-kill-region)
           ("M-j M-w" . avy-kill-region)
           ("M-j o"   . avy-kill-ring-save-whole-line)
           ("M-j M-o" . avy-kill-ring-save-whole-line)
           ("M-j p"   . avy-kill-ring-save-region)
           ("M-j M-p" . avy-kill-ring-save-region)))

  ;;----------------------------------------------------------------------------
  ;; bb-mode
  ;;----------------------------------------------------------------------------
  (use-package bb-mode
    :defer t
    :mode ("\\.bb$" "\\.bbappend$" "\\.bbclass$" "\\.conf$" "\\.inc$"))

  (use-package centaur-tabs
    :demand
    :config
    (progn
      (centaur-tabs-mode t)
      (centaur-tabs-group-by-projectile-project)
      (centaur-tabs-headline-match)
      (setq centaur-tabs-style "alternate"
            centaur-tabs-height 32
            centaur-tabs-set-icons t
            centaur-tabs-set-modified-marker t
            centaur-tabs-set-bar 'under
            centaur-tabs-show-navigation-buttons t
            centaur-tabs-gray-out-icons 'buffer))
    :bind (("C-<prior>" . centaur-tabs-backward)
           ("C-<next>" . centaur-tabs-forward)
           ("C-<home>" . centaur-tabs-backward-group)
           ("C-<end>" . centaur-tabs-forward-group)))

  ;;----------------------------------------------------------------------------
  ;; cmake-font-lock
  ;;----------------------------------------------------------------------------
  (use-package cmake-font-lock
    :after cmake-mode
    :hook (cmake-mode . cmake-font-lock-activate))

  ;;----------------------------------------------------------------------------
  ;; column-enforce-mode
  ;;----------------------------------------------------------------------------
  (use-package column-enforce-mode
    :defer t
    :config
    (progn
      (setq column-enforce-column fill-column)))

  ;;----------------------------------------------------------------------------
  ;; company
  ;;----------------------------------------------------------------------------
  (use-package company
    :defer t
    :bind (("M-\'" . company-complete)))

  ;;----------------------------------------------------------------------------
  ;; deadgrep
  ;;----------------------------------------------------------------------------
  (use-package deadgrep
    :defer t
    :bind ("<f5>" . deadgrep)
    :config
    (progn
      (defun deadgrep--arguments-patch (args)
        (push "--max-columns-preview" args)
        (push "--max-columns=150" args)
        (push "--follow" args)
        (push "--hidden" args)
        (push "--no-config" args))
      (advice-add 'deadgrep--arguments :filter-return #'deadgrep--arguments-patch)))

  ;;----------------------------------------------------------------------------
  ;; dired-k
  ;;----------------------------------------------------------------------------
  (use-package dired-k
    :defer t
    :after dired
    :hook (dired-initial-position . dired-k)
    :config
    (progn
      (setq dired-k-padding 1))
    :bind (:map dired-mode-map
           ("g" . dired-k)))

  ;;----------------------------------------------------------------------------
  ;; diredfl
  ;;----------------------------------------------------------------------------
  (use-package diredfl
    :defer t
    :after dired
    :hook (dired-mode . diredfl-mode))

  ;;----------------------------------------------------------------------------
  ;; duplicate-thing
  ;;----------------------------------------------------------------------------
  (use-package duplicate-thing
    :defer t
    :bind ("M-c" . duplicate-thing))

  ;;----------------------------------------------------------------------------
  ;; easy-kill
  ;;----------------------------------------------------------------------------
  (use-package easy-kill
    :defer t
    :bind (([remap kill-ring-save] . easy-kill)
           ([remap mark-sexp] . easy-mark)))

  ;;----------------------------------------------------------------------------
  ;; flycheck
  ;;----------------------------------------------------------------------------
  (use-package flycheck
    :defer t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error)
           ([remap lsp-ui-flycheck-list] . spacemacs/goto-flycheck-error-list)))

  ;;----------------------------------------------------------------------------
  ;; frog-jump-buffer
  ;;----------------------------------------------------------------------------
  (use-package frog-jump-buffer
    :defer t
    :config
    (progn
      (setq frog-jump-buffer-include-current-buffer nil))
    :bind ("C-o" . frog-jump-buffer))

  ;;----------------------------------------------------------------------------
  ;; helm-company
  ;;----------------------------------------------------------------------------
  (use-package helm-company
    :defer t
    :after company
    :bind (:map company-active-map
           ("C-l" . helm-company)))

  ;;----------------------------------------------------------------------------
  ;; helm-ctest
  ;;----------------------------------------------------------------------------
  (use-package helm-ctest
    :defer t
    :after projectile
    :config
    (progn
      (setq helm-ctest-dir (projectile-compilation-dir))))

  ;;----------------------------------------------------------------------------
  ;; helm-make
  ;;----------------------------------------------------------------------------
  (use-package helm-make
    :defer t
    :after projectile
    :config
    (progn
      (setq helm-make-executable "make -s")
      (setq helm-make-build-dir (projectile-compilation-dir))
      (setq helm-make-nproc 0)
      (setq helm-make-sort-targets t)
      (setq helm-make-fuzzy-matching t)))

  ;;----------------------------------------------------------------------------
  ;; helm-lsp
  ;;----------------------------------------------------------------------------
  (use-package helm-lsp
    :defer t
    :after helm lsp-mode
    :bind (([remap lsp-execute-code-action] . helm-lsp-code-actions)
           ("M-\"" . helm-lsp-workspace-symbol)))

  ;;----------------------------------------------------------------------------
  ;; helm-treemacs-icons
  ;;----------------------------------------------------------------------------
  (use-package helm-treemacs-icons
    :defer nil
    :if window-system
    :init (helm-treemacs-icons-enable))

  ;;----------------------------------------------------------------------------
  ;; highlight-indent-guides
  ;;----------------------------------------------------------------------------
  (use-package highlight-indent-guides
    :defer t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (progn
      (setq highlight-indent-guides-method 'character
            highlight-indent-guides-responsive 'top)
      (highlight-indent-guides-auto-set-faces)))

  ;;----------------------------------------------------------------------------
  ;; iedit
  ;;----------------------------------------------------------------------------
  (use-package iedit
    :defer t
    :bind ([remap evil-iedit-state/iedit-mode] . iedit-mode))

  ;;----------------------------------------------------------------------------
  ;; lsp
  ;;----------------------------------------------------------------------------
  (use-package lsp
    :defer t
    :bind ([remap lsp-ui-peek-find-workspace-symbol] .
             helm-lsp-workspace-symbol))

  ;;----------------------------------------------------------------------------
  ;; lsp-treemacs
  ;;----------------------------------------------------------------------------
  (use-package lsp-treemacs
    :defer t
    :if window-system
    :after lsp
    :init
    (progn
      (spacemacs/set-leader-keys-for-minor-mode 'lsp-mode
        "gE" #'lsp-treemacs-errors-list)))

  ;;----------------------------------------------------------------------------
  ;; lsp-ui
  ;;----------------------------------------------------------------------------
  (use-package lsp-ui
    :defer t
    :bind (:map lsp-ui-flycheck-list-mode-map
           ("n"     . next-line)
           ("p"     . previous-line)
           ("RET"   . lsp-ui-flycheck-list--view)
           ("M-RET" . lsp-ui-flycheck-list--visit)
           ("o"     . lsp-ui-flycheck-list--visit)))

  ;;----------------------------------------------------------------------------
  ;; magit
  ;;----------------------------------------------------------------------------
  (use-package magit
   :defer t
   :config
    (progn
      (require 'xdg)
      (setq magit-credential-cache-daemon-socket
        (concat (xdg-cache-home) "/git/credential/socket"))
      (transient-append-suffix 'magit-rebase "-d"
        '("-D" "Use current timestamp for author date" "--ignore-date"))))

  ;;----------------------------------------------------------------------------
  ;; move-text
  ;;----------------------------------------------------------------------------
  (use-package move-text
    :defer t
    :bind (("M-<down>" . move-text-down)
           ("M-<up>"   . move-text-up)))

  ;;----------------------------------------------------------------------------
  ;; multiple-cursors
  ;;----------------------------------------------------------------------------
  (use-package multiple-cursors
    :defer t
    :bind (("C-."     . mc/mark-next-like-this)
           ("C-,"     . mc/mark-previous-like-this)
           ("C->"     . mc/mark-next-like-this-word)
           ("C-<"     . mc/mark-previous-like-this-word)
           ("C-c l"   . mc/edit-lines)
           ("C-c ."   . mc/mark-next-like-this)
           ("C-c ,"   . mc/mark-previous-like-this)
           ("C-c >"   . mc/mark-next-like-this-word)
           ("C-c <"   . mc/mark-previous-like-this-word)
           ("C-c M-." . mc/unmark-next-like-this)
           ("C-c M-," . mc/unmark-previous-like-this)
           ("C-c M->" . mc/mark-all-like-this)
           ("C-c M-<" . mc/mark-all-words-like-this)))

  ;;----------------------------------------------------------------------------
  ;; mwim
  ;;----------------------------------------------------------------------------
  (use-package mwim
    :defer t
    :init
    (progn
      (if better-defaults-move-to-beginning-of-code-first
        (global-set-key (kbd "M-a") 'mwim-beginning-of-code-or-line)
        (global-set-key (kbd "M-a") 'mwim-beginning-of-line-or-code))

      (if better-defaults-move-to-end-of-code-first
        (global-set-key (kbd "M-e") 'mwim-end-of-code-or-line)
        (global-set-key (kbd "M-e") 'mwim-end-of-line-or-code))))

  ;;----------------------------------------------------------------------------
  ;; projectile
  ;;----------------------------------------------------------------------------
  (use-package projectile
    :defer t
    :init
    (progn
      (spacemacs/set-leader-keys
        "pC" 'projectile-configure-project
        "pt" 'projectile-test-project
        "pT" 'spacemacs/treemacs-project-toggle))
    :config
    (progn
      (projectile-register-project-type 'cmake '("CMakeLists.txt")
        :compilation-dir "build"
        :configure (string-join '("cmake" ".."
          "-DCMAKE_BUILD_TYPE=Debug"
          "-DCMAKE_INSTALL_PREFIX=/usr"
          "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON") " ")
        :compile "cmake --build . -- -j$(nproc)"
        :test "cmake --build . -- -j$(nproc) && ctest --output-on-failure")))

  ;;----------------------------------------------------------------------------
  ;; smartparens
  ;;----------------------------------------------------------------------------
  (use-package smartparens
    :defer t
    :config
    (progn
      (setq sp-escape-quotes-after-insert nil)))

  ;;----------------------------------------------------------------------------
  ;; vlf
  ;;----------------------------------------------------------------------------
  (use-package vlf
    :defer t
    :config (require 'vlf-setup))

  ;;----------------------------------------------------------------------------
  ;; vterm
  ;;----------------------------------------------------------------------------
  (use-package vterm
    :defer t
    :config
    (setq vterm-kill-buffer-on-exit t))

  ;;----------------------------------------------------------------------------
  ;; vterm-toggle
  ;;----------------------------------------------------------------------------
  (use-package vterm-toggle
    :defer t
    :bind (("<f2>"    . vterm-toggle)
           :map vterm-mode-map
           ("<f2>"    . vterm-toggle)
           ("C-c C-d" . vterm-toggle-insert-cd)))

  ;;----------------------------------------------------------------------------
  ;; xclip
  ;;----------------------------------------------------------------------------
  ;; Enables xclip integration for copy/paste to system clipboard.
  ;; The `xclip` package needs to be installed on the machine emacs is running.
  (use-package xclip
    :config
    (xclip-mode 1))

  ;;----------------------------------------------------------------------------
  ;; which-key
  ;;----------------------------------------------------------------------------
  (use-package which-key
    :defer t
    :init
      (setq which-key-compute-remaps t
            which-key-sort-order 'which-key-key-order-alpha))

  ;;----------------------------------------------------------------------------
  ;; zop-to-char
  ;;----------------------------------------------------------------------------
  (use-package zop-to-char
    :defer t
    :bind ([remap zap-to-char] . zop-up-to-char))

  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
