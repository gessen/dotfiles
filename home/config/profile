# Set XDG dir vars
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

# Set bash/zsh history file
if [ -n "${BASH_SOURCE}" ]; then
  export HISTFILE="${XDG_DATA_HOME}/bash/history"
  mkdir -p "${XDG_DATA_HOME}/bash"
elif [ -n "${ZSH_NAME}" ]; then
  export HISTFILE="${XDG_DATA_HOME}/zsh/history"
  mkdir -p "${XDG_DATA_HOME}/zsh"
fi

# History limits
export HISTSIZE=1000000
export SAVEHIST=1000000

# Set both EDITOR and VISUAL to emacsclient with autostarted server
export EDITOR="emacsclient --tty"
export VISUAL="$EDITOR"

# Default less options
LESS="--quit-at-eof"
LESS="--quit-if-one-screen $LESS"
LESS="--ignore-case $LESS"
LESS="--LONG-PROMPT $LESS"
LESS="--RAW-CONTROL-CHARS $LESS"
LESS="--no-init $LESS"
LESS="--hilite-unread $LESS"
LESS="--window=-4 $LESS"
LESS="--shift 5 $LESS"
export LESS

# Do not save less search history in ~/.lesshst
export LESSHISTFILE="-"

# Use less as PAGER
export PAGER="less --squeeze-blank-lines"

# Use bat as MANPAGER
export MANPAGER="sh -c 'col -b | bat -l man -p'"

# emacsclient starts emacs in daemon mode if it can't connect to it
export ALTERNATE_EDITOR=''

# Conform to XDG with cargo
export CARGO_HOME="${XDG_DATA_HOME}/cargo"

# Conform to XDG with ccache
export CCACHE_CONFIGPATH="${XDG_CONFIG_HOME}/ccache/config"
export CCACHE_DIR="${XDG_CACHE_HOME}/ccache"

# Generates compile_commands.json by default
export CMAKE_EXPORT_COMPILE_COMMANDS=ON

# Use ccache by default
export CMAKE_C_COMPILER_LAUNCHER="CCACHE_CPP2=yes;CCACHE_HASHDIR=yes;ccache"
export CMAKE_CXX_COMPILER_LAUNCHER="CCACHE_CPP2=yes;CCACHE_HASHDIR=yes;ccache"

# Conform to XDG with fasd cache
export _FASD_DATA="${XDG_CACHE_HOME}/fasd"

# Set fd as the default source for fzf
export FZF_DEFAULT_COMMAND="fd \
--hidden \
--follow \
--exclude='.git/' \
"

# Default fzf options
export FZF_DEFAULT_OPTS=" \
--height=60% \
--bind alt-p:preview-up,alt-n:preview-down \
--bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all \
"

# Use fd for CTRL-T
export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"

# Use fd for ALT-C with preview
export FZF_ALT_C_COMMAND="${FZF_DEFAULT_COMMAND} --type directory"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# Open CTRL-T, CTRL-R and ALT-C in tmux-pane
export FZF_TMUX=1
export FZF_TMUX_HEIGHT=40%

# Conform to XDG with GnuPG
export GNUPGHOME="${XDG_DATA_HOME}/gnupg"

# Conform to XDG with GTK 2
export GTK2_RC_FILES="${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"

# Include the current load to the ninja status
export NINJA_STATUS="[%s/%f/%t] (j%r/%e) "

# Use persistent configuration file for ripgrep
export RIPGREP_CONFIG_PATH="${XDG_CONFIG_HOME}/ripgrep/config"

# Conform to XDG with rustup
export RUSTUP_HOME="${XDG_DATA_HOME}/rustup"

# Conform to XDG with vode
export VSCODE_EXTENSIONS="${XDG_DATA_HOME}/code/extensions"

# Check directories size
alias du='du --max-depth=1 --human-readable'

# Use lsd instead
alias ls='lsd --classify --group-dirs=first --date=relative'
alias ll='ls --long'
alias la='ll --all'

# Emacs
alias ec='emacsclient --tty'
alias ecg='emacsclient --create-frame'

alias gsm='git switch $(git_main_branch)'
alias gsd='git switch develop'
alias gignore='git update-index --skip-worktree'
alias gunignore='git update-index --no-skip-worktree'
alias gd2='GIT_PAGER="delta --side-by-side" git diff'
alias gdca2='GIT_PAGER="delta --side-by-side" git diff --cached'
alias gdn='DELTA_NAVIGATE=1 git diff'
alias gdcan='DELTA_NAVIGATE=1 git diff --cached'
alias gdt='git difftool'
alias gmt='git mergetool'
alias gdtg='git difftool --gui'
alias gmtg='git mergetool --gui'

# Use bat
alias cat='bat'

# Use original code with vscodium
alias code='vscodium'

alias fu='sudo !!'

# Use fzf-tmux
alias fzf='fzf-tmux -d 40%'

# Tig for all refs
alias tia='tig --all'

# mkdir + cd
mkcd() {
  mkdir -p "$1" && cd "$1" || return
}

# Normal z when used with arguments but displays an fzf prompt when used without
unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && fasd_cd -d "$*" && return
  local dir
  dir="$(fasd -Rdl | fzf --select-1 --exit-0 --no-sort --no-multi)" \
    && cd "${dir}" \
    || return 1
}

# Display fzf prompt when using zz
unalias zz 2> /dev/null
zz() {
  local dir
  dir="$(fasd -Rdl "$1" | fzf --select-1 --exit-0 --no-sort --no-multi)" \
    && cd "${dir}" \
    || return 1
}

# Open the selected file with EDITOR with fzf+fasd
e() {
  local file
  file="$(fasd -Rfl "$1" \
    | fzf --select-1 --exit-0 --no-sort --no-multi)"

  [[ -n "${file}" ]] && eval "${EDITOR}" "${file}"
}

# Open the selected files with EDITOR with fzf
fe() {
  local -a files
  IFS=$'\n' files=($(fzf --query="$1" --select-1 --exit-0 --multi))
  [[ -n "${files}" ]] && eval "${EDITOR}" "${files[@]}"
}

# Fuzzy grep open via ripgrep
eg() {
  local file
  local line
  local column
  read -r file line column <<< \
    "$(rg --no-heading --column --line-number --pretty "$@" \
      | fzf --ansi --select-1 --exit-0 \
      | awk -F: '{print $1, $2, $3}')"

  [[ -n "${file}" ]] && eval "${EDITOR}" +"${line}":"${column}" "${file}"
}

# Fuzzy grep open with preview via ripgrep
egp() {
  local -a files
  if [[ "$#" == 0 ]]; then return 1; fi
  files=($(rg --max-count=1 --files-with-matches --no-messages "$@" \
    | fzf --select-1 --exit-0 --multi \
      --preview="rg --pretty --context=10 $* {}"))

  [[ -n "${files}" ]] && eval "${EDITOR}" "${files[@]}"
}

# Create new tmux session or switch to existing one. Works from within tmux too.
tm() {
  [[ -n "${TMUX}" ]] && change="switch-client" || change="attach-session"
  if [[ -n "$1" ]]; then
    tmux "${change}" -t "$1" 2> /dev/null \
      || (tmux new-session -d -s "$1" && tmux "${change}" -t "$1")
    return
  fi
  local session
  session="$(tmux list-sessions -F "#{session_name}" 2> /dev/null \
    | fzf --select-1 --exit-0)" \
    && tmux "${change}" -t "${session}"
}

# Open gdb within 2 tmux panes
gdb-tmux() {
  local id
  local tty
  id="$(tmux split-pane -hPF "#D" "tail -f /dev/null")"
  tmux last-pane
  tty="$(tmux display-message -p -t "${id}" '#{pane_tty}')"
  gdb -ex "dashboard -output ${tty}" "$@"
  tmux kill-pane -t "${id}"
}

ranger() {
  local tempfile
  local IFS=$'\t\n'
  tempfile="$(mktemp -t tmp.XXXXXX)"
  local ranger_cmd=(
    command
    ranger
    --cmd="map Qq chain shell echo %d > ${tempfile}; quitall"
    --cmd="map Qs chain shell echo %d > ${tempfile}; shell tmux split-window -h"
    --cmd="map Qv chain shell echo %d > ${tempfile}; shell tmux split-window -v"
    --cmd="map Qw chain shell echo %d > ${tempfile}; shell tmux new-window"
  )

  "${ranger_cmd[@]}" "$@"
  if [[ -f "${tempfile}" ]] \
    && [[ "$(cat -- "${tempfile}")" != "$(echo -n "$(pwd)")" ]]; then
    cd -- "$(cat "${tempfile}")" || return
  fi
  command rm -f -- "${tempfile}" 2> /dev/null
}
