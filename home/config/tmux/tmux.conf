# Remap prefix from 'C-b' to 'C-s'
unbind-key C-b
set-option -g prefix M-s
bind-key M-s send-prefix

# Split panes using | and - with the current pane's path
bind-key -N "Split window horizontally" '\' split-window -h -c '#{pane_current_path}'
bind-key -N "Split window horizontally"  |  split-window -h -c '#{pane_current_path}'
bind-key -N "Split window vertically"    -  split-window -v -c '#{pane_current_path}'
bind-key -N "Split window vertically"    _  split-window -v -c '#{pane_current_path}'
unbind-key '"'
unbind-key %

# Resize panes
bind-key -N "Resize the pane left by 10"  -r C-Left  resize-pane -L 10
bind-key -N "Resize the pane right by 10" -r C-Right resize-pane -R 10
bind-key -N "Resize the pane up by 5"     -r C-Up    resize-pane -U 5
bind-key -N "Resize the pane down by 5"   -r C-Down  resize-pane -D 5
unbind-key M-Left
unbind-key M-Right
unbind-key M-Up
unbind-key M-Down

# Switch panes using with prefix
bind-key -N "Select the next pane"     -r n select-pane -t +1
bind-key -N "Select the next pane"     -r o select-pane -t +1
bind-key -N "Select the previous pane" -r p select-pane -t -1
bind-key -N "Select the previously current pane" -r l last-pane

# Create new window using c with the current pane's path
bind-key -N "Create a new window" c new-window -c '#{pane_current_path}'

# Switch windows using Ctrl-arrow without prefix
bind-key -N "Select the next window"     -n C-Right next-window
bind-key -N "Select the previous window" -n C-Left  previous-window

# Switch windows using M-n/p/l with prefix
bind-key -N "Select the next window"     -r M-n next-window
bind-key -N "Select the next window"     -r M-o next-window
bind-key -N "Select the previous window" -r M-p previous-window
bind-key -N "Select the previously current window" -r M-l last-window

# Moving windows
bind-key -N "Swap the active window with the window to the right" -r > swap-window -dt +1
bind-key -N "Swap the active window with the window to the left " -r < swap-window -dt -1

# Synchronize panes
bind-key * set-window-option synchronize-pane

# Enable mouse mode
set-option -g mouse on

# Reload config file
bind-key C-r source-file ~/.config/tmux/tmux.conf

# Rename session and window
bind -N "Rename current window"  r command-prompt -I "#{window_name}" "rename-window '%%'"
bind -N "Rename current session" R command-prompt -I "#{session_name}" "rename-session '%%'"
unbind "\$" # rename-session
unbind ,    # rename-window

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind-key -N "Merge sessions" C-u command-prompt -p "Session to merge with: " \
  "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind-key -N "Detach from session" d detach
bind-key -N "Detach other clients from session" D if -F '#{session_many_attached}' \
  'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
  'display "Session has only 1 client attached"'

# Double LMB Select & Copy (Word)
bind-key -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "xclip -in -selection clipboard"

# Do not use xterm escape sequences with clipboard
set-option -g set-clipboard off

# Set scrollback limit
set-option -g history-limit 50000

# Use emacs style navigation inside tmux
set-option -g mode-keys emacs

# Use emacs style navigation inside status line
set-option -g status-keys emacs

# Change index to 1 for windows and panes
set-option -g base-index 1
set-option -g pane-base-index 1

# Automatically set window title
set-option -g automatic-rename on
set-option -g set-titles on

# Set parent terminal title to reflect current window in tmux session
set-option -g set-titles-string "#I:#W"

# Renumber windows when a window is closed
set-option -g renumber-windows on

# No delay for escape key press
set-option -g escape-time 0

# Time for which status line messages are displayed
set-option -g display-time 1000

# Windows with bell are highlighted in the status line and the bell is heard
set-option -g bell-action other
set-option -g monitor-bell on

# Status bar
set-option -g status on
set-option -g status-position bottom
set-option -g status-justify left
set-option -g status-left-length 50
set-option -g status-right-length 50
set-option -g status-style fg=colour231,bg=colour234
set-option -g status-left  '#[fg=colour235,bg=colour252,bold] #{?client_prefix,⌨,❐} #S #[fg=colour252,bg=colour238,nobold]#[fg=colour245,bg=colour238,bold] #h #[fg=colour238,bg=colour234,nobold]'
set-option -g status-right '#[fg=colour238,bg=colour234,nobold]#[fg=colour245,bg=colour238,bold]%H:%M'

# Redraw status line every second
set-option -g status-interval 1

# Pane status bar
set-option -g pane-active-border-style fg=colour39
set-option -g pane-border-style fg=colour243

# Window status bar
set-option -g window-status-format         "#[fg=colour244,bg=colour234] #I #[fg=colour240] #{?window_bell_flag,#[fg=colour4],#[default]}#W "
set-option -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"
set-option -g window-status-bell-style ''

# Modes
set-option -g mode-style bg=colour31,fg=colour255,bold

# Messages
set-option -g message-style bg=colour31,fg=colour255,bold

# List of plugins
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.local/share/tmux'
set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmux-continuum'
set-option -g @plugin 'tmux-plugins/tmux-copycat'
set-option -g @plugin 'tmux-plugins/tmux-yank'

set-option -g @resurrect-restore 'Z'
set-option -g @resurrect-capture-pane-contents 'on'
set-option -g @resurrect-dir '~/.cache/tmux'

set -g @copycat_search_G '\b[0-9a-f]{5,40}\b'

set-option -g @yank_selection_mouse 'clipboard'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if "test ! -d ~/.local/share/tmux/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/tpm && ~/.local/share/tmux/tpm/bin/install_plugins'"
run '~/.local/share/tmux/tpm/tpm'
