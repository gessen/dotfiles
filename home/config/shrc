# Set bash/zsh history file
if [ -n "${BASH_SOURCE}" ]; then
  export HISTFILE="${XDG_DATA_HOME}/bash/history"
  mkdir -p "${XDG_DATA_HOME}/bash"
elif [ -n "${ZSH_NAME}" ]; then
  export HISTFILE="${XDG_DATA_HOME}/zsh/history"
  mkdir -p "${XDG_DATA_HOME}/zsh"
fi

# Human readable outputs from commands
alias du='du --max-depth=1 --human-readable'
alias df='df --human-readable'
alias free='free --human'

# Use lsd instead
alias ls='lsd'
alias ll='ls --long'
alias la='ll --almost-all'
alias l='la'

# Emacs
alias ec='emacsclient --tty'
alias ecg='emacsclient --create-frame --no-wait'
alias mg='ec --eval "(magit-status)"'
alias mgg='ecg --eval "(magit-status)"'

alias gsm='git switch master'
alias gsd='git switch develop'
alias gignore='git update-index --skip-worktree'
alias gunignore='git update-index --no-skip-worktree'
alias gd2='GIT_PAGER="delta --side-by-side" git diff'
alias gdca2='GIT_PAGER="delta --side-by-side" git diff --cached'
alias gdn='git -c delta.navigate=true diff'
alias gdcan='git -c delta.navigate=true diff --cached'
alias gdt='git difftool'
alias gmt='git mergetool'
alias gdtg='git difftool --gui'
alias gmtg='git mergetool --gui'

# Use fd with yocto dirs ignored
alias fd="${FZF_DEFAULT_COMMAND}"

# Use bat
alias cat='bat'

# Use original code with vscodium
alias code='vscodium'

alias fu='sudo !!'

# Use fzf-tmux
alias fzf='fzf-tmux -d 40%'

# Use terminfo that should be present on remote hosts
alias ssh='TERM=xterm-256color ssh'

# Tig for all refs
alias tia='tig --all'

# Nicer scp/rsync
alias transfer='kitty +kitten transfer'

# Go to Workspace
alias fp='cd ${HOME}/Workspace'

# Go to project dirs
alias aafia='cd ${FP}/yocto/5mf5'
alias asmr='cd ${FP}/yocto/5gw5'
alias gluon='cd ${FP}/yocto/5gh4'
alias megatron='cd ${FP}/yocto/cta6'
alias nahka='cd ${FP}/yocto/frm5'
alias scorpio='cd ${FP}/yocto/erm6'
alias scorpio-cpri='cd ${FP}/yocto/urm6'
alias yoda='cd ${FP}/yocto/srm7'

# mkdir + cd
mkcd() {
  mkdir -p "$1" && cd "$1" || return
}

# Normal z when used with arguments but displays an fzf prompt when used without
unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && fasd_cd -d "$*" && return
  local dir
  dir="$(fasd -Rdl | fzf --select-1 --exit-0 --no-sort --no-multi)" \
    && cd "${dir}" \
    || return 1
}

# Display fzf prompt when using zz
unalias zz 2> /dev/null
zz() {
  local dir
  dir="$(fasd -Rdl "$1" | fzf --select-1 --exit-0 --no-sort --no-multi)" \
    && cd "${dir}" \
    || return 1
}

# Open the selected file with EDITOR with fzf+fasd
e() {
  local file
  file="$(fasd -Rfl "$1" \
    | fzf --select-1 --exit-0 --no-sort --no-multi)"

  [[ -n "${file}" ]] && eval "${EDITOR}" "${file}"
}

# Open the selected files with EDITOR with fzf
fe() {
  local -a files
  IFS=$'\n' files=($(fzf --query="$1" --select-1 --exit-0 --multi))
  [[ -n "${files}" ]] && eval "${EDITOR}" "${files[@]}"
}

# Fuzzy grep open via ripgrep
eg() {
  local file
  local line
  local column
  read -r file line column <<< \
    "$(rg --no-heading --column --line-number --pretty "$@" \
      | fzf --ansi --select-1 --exit-0 \
      | awk -F: '{print $1, $2, $3}')"

  [[ -n "${file}" ]] && eval "${EDITOR}" +"${line}":"${column}" "${file}"
}

# Fuzzy grep open with preview via ripgrep
egp() {
  local -a files
  if [[ "$#" == 0 ]]; then return 1; fi
  files=($(rg --max-count=1 --files-with-matches --no-messages "$@" \
    | fzf --select-1 --exit-0 --multi \
      --preview="rg --pretty --context=10 $* {}"))

  [[ -n "${files}" ]] && eval "${EDITOR}" "${files[@]}"
}

# Create new tmux session or switch to existing one. Works from within tmux too.
tm() {
  [[ -n "${TMUX}" ]] && change="switch-client" || change="attach-session"
  if [[ -n "$1" ]]; then
    tmux "${change}" -t "$1" 2> /dev/null \
      || (tmux new-session -d -s "$1" && tmux "${change}" -t "$1")
    return
  fi
  local session
  session="$(tmux list-sessions -F "#{session_name}" 2> /dev/null \
    | fzf --select-1 --exit-0)" \
    && tmux "${change}" -t "${session}"
}

# Open gdb within 2 tmux panes
gdb-tmux() {
  local id
  local tty
  id="$(tmux split-pane -hPF "#D" "tail -f /dev/null")"
  tmux last-pane
  tty="$(tmux display-message -p -t "${id}" '#{pane_tty}')"
  gdb -ex "dashboard -output ${tty}" "$@"
  tmux kill-pane -t "${id}"
}

ranger() {
  local tempfile
  local IFS=$'\t\n'
  tempfile="$(mktemp -t tmp.XXXXXX)"
  local ranger_cmd=(
    command
    ranger
    --cmd="map Qq chain shell echo %d > ${tempfile}; quitall"
    --cmd="map Qs chain shell echo %d > ${tempfile}; shell tmux split-window -h"
    --cmd="map Qv chain shell echo %d > ${tempfile}; shell tmux split-window -v"
    --cmd="map Qw chain shell echo %d > ${tempfile}; shell tmux new-window"
  )

  "${ranger_cmd[@]}" "$@"
  if [[ -f "${tempfile}" ]] \
    && [[ "$(cat -- "${tempfile}")" != "$(echo -n "$(pwd)")" ]]; then
    cd -- "$(cat "${tempfile}")" || return
  fi
  command rm -f -- "${tempfile}" 2> /dev/null
}
