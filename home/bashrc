# If not running interactively, don't do anything
[[ $- != *i* ]] && return

export SHELL="$(which bash)"

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '

if [[ -r "/usr/share/bash-completion/bash_completion" ]]; then
  . "/usr/share/bash-completion/bash_completion"
fi

# Change the window title of X terminals
case ${TERM} in
  xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}: ${PWD/#$HOME/~}\007"'
    ;;
  screen*)
    PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}: ${PWD/#$HOME/\~}\033\\"'
    ;;
esac

if type -P dircolors >/dev/null ; then
  if [[ -f ~/.dir_colors ]] ; then
    eval $(dircolors -b ~/.dir_colors)
  elif [[ -f /etc/DIR_COLORS ]] ; then
    eval $(dircolors -b /etc/DIR_COLORS)
  fi
fi

xhost +local:root > /dev/null 2>&1

complete -cf sudo

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

export IGNOREEOF=10

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'
alias ........='cd ../../../../../../..'
alias .........='cd ../../../../../../../..'

# Git aliases from oh-my-zsh
alias g=git
alias ga='git add'
alias gaa='git add --all'
alias gam='git am'
alias gama='git am --abort'
alias gamc='git am --continue'
alias gams='git am --skip'
alias gamscp='git am --show-current-patch'
alias gap='git apply'
alias gapa='git add --patch'
alias gapt='git apply --3way'
alias gau='git add --update'
alias gav='git add --verbose'
alias gb='git branch'
alias gbD='git branch -D'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbda='git branch --no-color --merged | command grep -vE "^(\+|\*|\s*($(git_main_branch)|development|develop|devel|dev)\s*$)" | command xargs -n 1 git branch -d'
alias gbl='git blame -b -w'
alias gbnm='git branch --no-merged'
alias gbr='git branch --remote'
alias gbs='git bisect'
alias gbsb='git bisect bad'
alias gbsg='git bisect good'
alias gbsr='git bisect reset'
alias gbss='git bisect start'
alias gc='git commit -v'
alias gc!='git commit -v --amend'
alias gca='git commit -v -a'
alias gca!='git commit -v -a --amend'
alias gcam='git commit -a -m'
alias gcan!='git commit -v -a --no-edit --amend'
alias gcans!='git commit -v -a -s --no-edit --amend'
alias gcb='git checkout -b'
alias gcd='git checkout develop'
alias gcf='git config --list'
alias gcl='git clone --recurse-submodules'
alias gclean='git clean -id'
alias gcm='git checkout $(git_main_branch)'
alias gcmsg='git commit -m'
alias gcn!='git commit -v --no-edit --amend'
alias gco='git checkout'
alias gcount='git shortlog -sn'
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'
alias gcs='git commit -S'
alias gcsm='git commit -s -m'
alias gd='git diff'
alias gd2='GIT_PAGER="delta --side-by-side" git diff'
alias gdca='git diff --cached'
alias gdca2='GIT_PAGER="delta --side-by-side" git diff --cached'
alias gdcan='git -c delta.navigate=true diff --cached'
alias gdct='git describe --tags $(git rev-list --tags --max-count=1)'
alias gdcw='git diff --cached --word-diff'
alias gdn='git -c delta.navigate=true diff'
alias gds='git diff --staged'
alias gdt='git difftool'
alias gdtg='git difftool --gui'
alias gdw='git diff --word-diff'
alias gf='git fetch'
alias gfa='git fetch --all --prune --jobs=10'
alias gfg='git ls-files | grep'
alias gfo='git fetch origin'
alias gg='git gui citool'
alias gga='git gui citool --amend'
alias ggpull='git pull origin "$(git_current_branch)"'
alias ggpush='git push origin "$(git_current_branch)"'
alias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
alias ghh='git help'
alias gignore='git update-index --skip-worktree'
alias gignored='git ls-files -v | grep "^[[:lower:]]"'
alias git-svn-dcommit-push='git svn dcommit && git push github $(git_main_branch):svntrunk'
alias gk='\gitk --all --branches'
alias gke='\gitk --all $(git log -g --pretty=%h)'
alias gl='git pull'
alias glg='git log --stat'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glgp='git log --stat -p'
alias glo='git log --oneline --decorate'
alias glod='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\'
alias glods='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\'' --date=short'
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias glol='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'
alias glola='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --all'
alias glols='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --stat'
alias glp=_git_log_prettily
alias glum='git pull upstream $(git_main_branch)'
alias gm='git merge'
alias gma='git merge --abort'
alias gmom='git merge origin/$(git_main_branch)'
alias gmt='git mergetool'
alias gmtg='git mergetool --gui'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
alias gmum='git merge upstream/$(git_main_branch)'
alias gp='git push'
alias gpd='git push --dry-run'
alias gpf='git push --force-with-lease'
alias gpf!='git push --force'
alias gpoat='git push origin --all && git push origin --tags'
alias gpristine='git reset --hard && git clean -dffx'
alias gpsup='git push --set-upstream origin $(git_current_branch)'
alias gpu='git push upstream'
alias gpv='git push -v'
alias gr='git remote'
alias gra='git remote add'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbd='git rebase develop'
alias grbi='git rebase -i'
alias grbm='git rebase $(git_main_branch)'
alias grbo='git rebase --onto'
alias grbs='git rebase --skip'
alias grev='git revert'
alias grh='git reset'
alias grhh='git reset --hard'
alias grm='git rm'
alias grmc='git rm --cached'
alias grmv='git remote rename'
alias groh='git reset origin/$(git_current_branch) --hard'
alias grrm='git remote remove'
alias grs='git restore'
alias grset='git remote set-url'
alias grss='git restore --source'
alias grst='git restore --staged'
alias grt='cd "$(git rev-parse --show-toplevel || echo .)"'
alias gru='git reset --'
alias grup='git remote update'
alias grv='git remote -v'
alias gsb='git status -sb'
alias gsd='git switch develop'
alias gsh='git show'
alias gsi='git submodule init'
alias gsm='git switch $(git_main_branch)'
alias gsps='git show --pretty=short --show-signature'
alias gsr='git svn rebase'
alias gss='git status -s'
alias gst='git status'
alias gsta='git stash push'
alias gstaa='git stash apply'
alias gstall='git stash --all'
alias gstc='git stash clear'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash show --text'
alias gstu='gsta --include-untracked'
alias gsu='git submodule update'
alias gsw='git switch'
alias gswc='git switch -c'
alias gtl='gtl(){ git tag --sort=-v:refname -n -l "${1}*" }; noglob gtl'
alias gts='git tag -s'
alias gtv='git tag | sort -V'
alias gunignore='git update-index --no-skip-worktree'
alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
alias gup='git pull --rebase'
alias gupa='git pull --rebase --autostash'
alias gupav='git pull --rebase --autostash -v'
alias gupv='git pull --rebase -v'
alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"'

# Simulate AUTO_PUSHD and PUSHD_TO_HOME from zsh
pushd() {
  if [ $# -eq 0 ]; then
    DIR="${HOME}"
  else
    DIR="$1"
  fi

  builtin pushd "${DIR}" > /dev/null
}

alias cd='pushd'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

# User configuration
. "${XDG_CONFIG_HOME}/shrc"

# Enable completion
. "${FP}/.local/share/bash-completion/bash_completion"

# Integrate fzf with bash
. "${FP}/.local/share/fzf/shell/completion.bash"
. "${FP}/.local/share/fzf/shell/key-bindings.bash"

# Patch yocto project if needed
function _rf-repo-patch() {
  local swline="${1}"
  local directory="${2}"

  case "${swline}" in
    5gw5)
      pushd "${FP}/yocto/${directory}/poky"
      patch -p1 < "${FP}/.dotfiles/toolchains/yocto/poky.patch"
      popd
    ;;
  esac
}

# Initialise yocto project with repo tool if not done yet
function _rf-repo-init() {
  local swline="${1}"
  local directory="${2}"
  local branch="${3}"
  local url="ssh://gerrite1.ext.net.nokia.com:8282/RFSW/PROJECTS/projects"
  local repo_rev="v2.12.2"
  local repo_init_cmd="repo init -u ${url} --repo-rev=${repo_rev} --depth=100"

  case "${swline}" in
    5gh4)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/manifest.xml" ]; then
        branch="${branch:-5GH4_release}"
        eval "${repo_init_cmd}" -b "${branch}" -m manifest.xml
        repo sync
      fi
      ;;
    5gw5)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/manifest.xml" ]; then
        branch="${branch:-5GW5_release}"
        eval "${repo_init_cmd}" -b "${branch}" -m manifest.xml
        repo sync
        _rf-repo-patch "${swline}" "${directory}"
      fi
      ;;
    5mf5)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/manifest.xml" ]; then
        branch="${branch:-REL5.1_develop_5MF5}"
        eval "${repo_init_cmd}" -b "${branch}" -m manifest.xml
        repo sync
      fi
      ;;
    cta6)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/default.xml" ]; then
        branch="${branch:-CTA6_release}"
        eval "${repo_init_cmd}" -b "${branch}"
        repo sync
      fi
      ;;
    erm6)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/manifest.xml" ]; then
        branch="${branch:-ERM6_release}"
        eval "${repo_init_cmd}" -b "${branch}" -m manifest.xml
        repo sync
      fi
      ;;
    frm5)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/manifest.xml" ]; then
        branch="${branch:-REL5.1_release}"
        eval "${repo_init_cmd}" -b "${branch}" -m manifest.xml
        repo sync
      fi
      ;;
    lrm6)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/default.xml" ]; then
        branch="${branch:-LRM6_release}"
        eval "${repo_init_cmd}" -b "${branch}"
        repo sync
      fi
      ;;
    srm6)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/default.xml" ]; then
        branch="${branch:-mMIMO_SRM6_release}"
        eval "${repo_init_cmd}" -b "${branch}"
        repo sync
      fi
      ;;
    srm7)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/default.xml" ]; then
        branch="${branch:-SRM7_release}"
        eval "${repo_init_cmd}" -b "${branch}"
        repo sync
      fi
      ;;
    trm6)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/default.xml" ]; then
        branch="${branch:-mMIMO_TRM6_release}"
        eval "${repo_init_cmd}" -b "${branch}"
        repo sync
      fi
      ;;
    trs6)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/default.xml" ]; then
        branch="${branch:-TRS6_release}"
        eval "${repo_init_cmd}" -b "${branch}"
        repo sync
      fi
      ;;
    urm6)
      mkcd "${FP}/yocto/${directory}"
      if [ ! -f "$(pwd)/manifest.xml" ]; then
        branch="${branch:-URM6_release}"
        "${repo_init_cmd}" -b "${branch}" -m manifest.xml
        repo sync
      fi
      ;;
    *)
      echo "error: invalid SW line name: ${swline}"
      return 2
  esac
}

# Set up environment for yocto projects
function _rf-env-init() {
  local swline="${1}"
  local directory="${2}"
  local project="${3:-}"

  case "${swline}" in
    5gh4)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/4.9.0a/bin:${PATH}"
      export PATH="/opt/git/x86_64/2.6.2/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.9.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.9.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.10 3.6.8
      ;;
    5gw5)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/4.8.5a/bin:${PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    5mf5)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/4.8.5a/bin:${PATH}"
      export PATH="/opt/tar/x86_64/1.28/bin:${PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    cta6)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/9.3.0a/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    erm6)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/4.8.5a/bin:${PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    frm5)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/4.9.0a/bin:${PATH}"
      export PATH="/opt/tar/x86_64/1.28/bin:${PATH}"
      export PATH="/opt/git/x86_64/2.6.2/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.9.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.9.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    lrm6)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/9.3.0a/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    srm6)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/9.3.0a/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    srm7)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/9.3.0a/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    trm6)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/9.3.0a/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    trs6)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/9.3.0a/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    urm6)
      mkcd "${FP}/yocto/${directory}"
      export PATH="/opt/gcc/x86_64/9.3.0a/bin:${PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/9.3.0a/lib64:${LD_LIBRARY_PATH}"
      pyenv local 2.7.16 3.6.8
      ;;
    *)
      echo "error: invalid SW line name: ${swline}"
      return 2
  esac
}

# Source RFSW yocto helper
function _rf-build-init() {
  local swline="${1}"
  local directory="${2}"
  local machine="${3}"
  local project="${4:-}"

  case "${swline}" in
    5gh4)
      machine="${machine:-5g-poco-mk4-hf}"
      source seesetenv python=2.7.10
      LINSEE_MIXTURE_LIST=RFSW_future XILINX_SDK_SEARCH_PATHS="${FP}/xilinx-sdk" source build.env "${machine}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.9.0a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.9.0a/lib64:${LD_LIBRARY_PATH}"
      ;;
    5gw5)
      machine="${machine:-5g-jabco-w5-x21}"
      machine="${machine/host-64/host}"
      machine="${machine/host/host-64}"
      LINSEE_MIXTURE_LIST=RFSW_5G_RH7 source build.env "${machine}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib64:${LD_LIBRARY_PATH}"
      ;;
    5mf5)
      machine="${machine:-nahka}"
      LINSEE_MIXTURE_LIST=RFSW_REL5 source build.env "${machine}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib:${LD_LIBRARY_PATH}"
      export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib64:${LD_LIBRARY_PATH}"
      ;;
    cta6)
      project=${project:-dfe}
      case "${project}" in
        dfe)
          machine="${machine:-ct-made}"
          machine="${machine/ct-made/made}"
          machine="${machine/made/ct-made}"
          machine="${machine/host-64/host}"
          machine="${machine/host/host-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        fronthaul)
          machine="${machine:-ct-zynqmp}"
          machine="${machine/ct-zynqmp/zynq}"
          machine="${machine/zynq/ct-zynqmp}"
          machine="${machine/host-64/host}"
          machine="${machine/host/host-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        *)
          echo "error: invalid project name: ${project} for SW line: ${swline}"
          return 2
      esac
      ;;
    erm6)
      project=${project:-dfe}
      case "${project}" in
        dfe)
          machine="${machine:-made}"
          LINSEE_MIXTURE_LIST=RFSW_REL6 source build.env "${machine}"
          export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib:${LD_LIBRARY_PATH}"
          export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib64:${LD_LIBRARY_PATH}"
          ;;
        beamer)
          machine="${machine:-stratix10-azqp}"
          PROJECT="${project}" source build.env "${machine}"
          export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib:${LD_LIBRARY_PATH}"
          export LD_LIBRARY_PATH="/opt/gcc/x86_64/4.8.5a/lib64:${LD_LIBRARY_PATH}"
          ;;
      esac
      ;;
    frm5)
      machine="${machine:-nahka}"
      machine="${machine/host-64/host}"
      machine="${machine/host/host-64}"
      LINSEE_MIXTURE_LIST=RFSW_REL5 source build.env "${machine}"
      ;;
    lrm6)
      project=${project:-beamer_tdcpri-lte}
      case "${project}" in
        beamer_tdcpri-lte)
          machine="${machine:-stratix10-aeqb}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        dfe_tdcpri-lte)
          machine="${machine:-made}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        *)
          echo "error: invalid project name: ${project} for SW line: ${swline}"
          return 2
      esac
      ;;
    srm6)
      project=${project:-beamer_ecpri}
      case "${project}" in
        beamer_ecpri)
          machine="${machine:-stratix10-aeqb}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        dfe_ecpri)
          machine="${machine:-made}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        *)
          echo "error: invalid project name: ${project} for SW line: ${swline}"
          return 2
      esac
      ;;
    srm7)
      project=${project:-mars}
      project=${project/beamer/thor}
      case "${project}" in
        mars)
          machine="${machine:-simics-mars}"
          machine="${machine/simics-mars/simics}"
          machine="${machine/simics/simics-mars}"
          machine="${machine/hycon-mars/hycon}"
          machine="${machine/hycon/hycon-mars}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS source build.env "${machine}"
          ;;
        thor)
          machine="${machine:-thor}"
          source seesetenv j2se=1.8.0_92
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        *)
          echo "error: invalid project name: ${project} for SW line: ${swline}"
          return 2
      esac
      ;;
    trm6)
      project=${project:-beamer_tdcpri}
      case "${project}" in
        beamer_tdcpri)
          machine="${machine:-stratix10-aeqb}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        dfe_tdcpri)
          machine="${machine:-made}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        *)
          echo "error: invalid project name: ${project} for SW line: ${swline}"
          return 2
      esac
      ;;
    trs6)
      project=${project:-beamer_aeqh_tdcpri}
      case "${project}" in
        beamer_aeqh_tdcpri)
          machine="${machine:-stratix10-aeqb}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        dfe_split-tdcpri)
          machine="${machine:-made}"
          machine="${machine/host/qemux86-64}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT=${project} source build.env "${machine}"
          ;;
        *)
          echo "error: invalid project name: ${project} for SW line: ${swline}"
          return 2
      esac
      ;;
    urm6)
      project=${project:-dfe}
      case "${project}" in
        dfe|dfe-c)
          machine="${machine:-made}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS source build.env "${machine}"
          ;;
        beamer|beamer-c)
          machine="${machine:-stratix10-azqp}"
          LINSEE_MIXTURE_LIST=RFSW_ZEUS PROJECT="${project}" source build.env "${machine}"
          ;;
      esac
      ;;
    *)
      echo "error: invalid SW line name: ${swline}"
      return 2
  esac
}

# Set up shell for yocto for different projects
function rf() {
  local opts="d:m:p:b:"
  local lopts="directory:,machine:,project:,branch:"
  local parsed
  local swline=""
  local directory=""
  local machine=""
  local project=""
  local branch=""

  parsed="$(getopt \
    --options=${opts} \
    --longoptions=${lopts} \
    --name="${FUNCNAME}" \
    -- $@)\
  "

  if [[ $? != 0 ]]; then
    return 2
  fi

  eval set -- "${parsed}"
  unset parsed

  while true; do
    case "$1" in
      -d|--directory)
        directory="$2"
        shift 2
        ;;
      -m|--machine)
        machine="$2"
        shift 2
        ;;
      -p|--project)
        project="$2"
        shift 2
        ;;
      -b|--branch)
        branch="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "error: logic error"
        return 2
        ;;
    esac
  done

  swline="${1:-srm7}"
  if [ -n "${branch}" ]; then
    directory="${directory:-${swline}-${branch////_}}"
  else
    directory="${directory:-${swline}}"
  fi

  _rf-repo-init "${swline}" "${directory}" "${branch}" || return
  _rf-env-init "${swline}" "${directory}" "${project}" || return
  _rf-build-init "${swline}" "${directory}" "${machine}" "${project}" || return
}

# Improve startup time of fasd
if command -v fasd 1>/dev/null 2>&1; then
  mkdir -p "${XDG_CACHE_HOME}/bash"
  fasd_cache="${XDG_CACHE_HOME}/bash/fasd-init-bash"
  if [[ "$(command -v fasd)" -nt "$fasd_cache" || ! -s "$fasd_cache" ]]; then
    fasd --init posix-alias bash-hook bash-ccomp bash-ccomp-install >| "$fasd_cache"
  fi
  . "$fasd_cache"
  unset fasd_cache
fi

# Run pyenv init setup after reading shprofile
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

cd "${FP}"
