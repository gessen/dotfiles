---
- name: Install packages
  command: 'paru -S --noconfirm --needed {{ package }}'
  loop: '{{ packages | default([], true) }}'
  loop_control:
    loop_var: package
  when: packages is defined
  register: paru_output
  changed_when: '"there is nothing to do" not in paru_output.stdout'

- name: Install packages as dependencies
  command: 'paru -S --noconfirm --needed --asdeps {{ package }}'
  loop: '{{ packages_asdeps | default([], true) }}'
  loop_control:
    loop_var: package
  when: packages_asdeps is defined
  register: paru_output
  changed_when: '"there is nothing to do" not in paru_output.stdout'

- name: Ignore packages from upgrade
  lineinfile:
    path: /etc/pacman.conf
    line: 'IgnorePkg = {{ packages_ignore | join(" ") }}'
    regexp: '^#?IgnorePkg'
  become: yes
  when: packages_ignore

- name: Install AUR packages
  command: 'paru -S --noconfirm --needed {{ package }}'
  loop: '{{ packages_aur | default([], true) }}'
  loop_control:
    loop_var: package
  when: packages_aur is defined
  register: paru_output
  changed_when: '"is up to date" not in paru_output.stdout'

- block:
  - name: Create folders for own recipes
    file:
      path: '{{ aur_dst }}/{{ package.name }}'
      state: directory
    loop: '{{ packages_own | default([], true) }}'
    loop_control:
      loop_var: package

  - name: Symlink own recipes
    file:
      path: '{{ aur_dst }}/{{ package.0.name }}/{{ package.1 }}'
      src: '{{ aur_src }}/{{ package.0.name }}/{{ package.1 }}'
      state: link
      force: yes
    loop: '{{ packages_own | subelements("files", skip_missing=True) }}'
    loop_control:
      loop_var: package

  - name: Install own packages
    command: 'makepkg -si --noconfirm --needed'
    args:
      chdir: '{{ aur_dst }}/{{ package.name }}'
    loop: '{{ packages_own | default([], true) }}'
    loop_control:
      loop_var: package
    register: makepkg_output
    changed_when: '"there is nothing to do" not in makepkg_output.stdout'

  when: packages_own is defined and packages_own

- name: Configure reflector service
  lineinfile:
    path: /etc/xdg/reflector/reflector.conf
    line: '{{ item.line }}'
    regexp: '{{ item.regexp }}'
  loop: '{{ reflector_options }}'
  become: yes

- name: Enable systemd services
  systemd:
    name: '{{ service }}'
    enabled: yes
    masked: no
  loop: '{{ services | default([], true) }}'
  loop_control:
    loop_var: service
  become: yes

- name: Symlink nerd-fonts
  file:
    path: '/etc/fonts/conf.d/10-nerd-font-symbols.conf'
    src: '/usr/share/fontconfig/conf.avail/10-nerd-font-symbols.conf'
    state: link
    force: yes
  become: yes
